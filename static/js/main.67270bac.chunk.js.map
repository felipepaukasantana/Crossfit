{"version":3,"sources":["components/PorcentagemList/index.js","components/TabelaPersonalRecord/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","overflow","cardContent","textAlign","alignItems","width","height","detalhes","flexDirection","justifyContent","wigth","detalhesBox","gridList","calcularPorcentagem","peso","porcentagem","toFixed","PorcentagemList","props","exercicio","porcentagens","classes","className","Accordion","AccordionSummary","expandIcon","aria-controls","id","Typography","nome","personalRecord","AccordionDetails","Grid","container","spacing","item","xs","GridList","cellHeight","cols","map","tile","GridListTile","key","valor","variant","display","gutterBottom","withStyles","head","backgroundColor","palette","common","black","color","white","body","fontSize","TableCell","action","hover","TableRow","table","minWidth","marginTop","tabela","flexWrap","left","top","position","TabelaPersonalRecord","useState","data","parseISO","exercicios","setPorcentagens","porcentagemInicial","setPorcentagemInicial","intervalo","setIntervalo","useEffect","lista","push","montarPorcentagens","TextField","label","value","onChange","event","Number","target","FormControl","component","FormLabel","RadioGroup","row","aria-label","name","defaultValue","FormControlLabel","control","Radio","labelPlacement","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.67270bac.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport { Card, CardContent } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        overflow: 'inherit'\r\n    },\r\n    cardContent: {\r\n        textAlign: 'center',\r\n        alignItems: 'center',\r\n        overflow: 'inherit',\r\n        width: 30,\r\n        height: 10,\r\n    },\r\n    detalhes: {\r\n        textAlign: 'center',\r\n        flexDirection: 'center',\r\n        justifyContent: 'center',\r\n        wigth: 500,\r\n    },\r\n    detalhesBox: {\r\n        width: 350,\r\n        textAlign: 'center',\r\n    },\r\n    gridList: {\r\n      width: 500,\r\n      height: 450,\r\n    },\r\n}));\r\n\r\nfunction calcularPorcentagem(peso, porcentagem) {\r\n    return (peso * (porcentagem / 100)).toFixed(2)\r\n}\r\n\r\nexport default function PorcentagemList(props) {\r\n    const { exercicio, porcentagens } = props;\r\n    const classes = useStyles();\r\n\r\n    function montarGridList() {\r\n        return (\r\n            <GridList cellHeight={50}  cols={5}>\r\n                {porcentagens.map((tile) => (\r\n                    <GridListTile key={tile.valor} cols={tile.cols || 1}>\r\n                        <Typography variant=\"button\" display=\"block\" gutterBottom>\r\n                            {tile.valor}\r\n                        </Typography>\r\n                        <Typography >\r\n                            {calcularPorcentagem(exercicio.personalRecord, tile.valor)}\r\n                        </Typography>\r\n                    </GridListTile>\r\n                ))}\r\n            </GridList>\r\n        );\r\n    }\r\n\r\n    function montarPorcentagens(linha) {\r\n        return (porcentagens.map((porcentagem) => (\r\n            <div >\r\n                <Grid item xs={12}>\r\n                    <Card className={classes.root}>\r\n                        <CardContent className={classes.cardContent}>\r\n                            <Typography variant=\"button\" display=\"block\" gutterBottom>\r\n                                {porcentagem.valor}\r\n                            </Typography>\r\n                        </CardContent>\r\n                        <CardContent className={classes.cardContent}>\r\n                            <Typography >\r\n                                {calcularPorcentagem(exercicio.personalRecord, porcentagem.valor)}\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n            </div>\r\n        )));\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Accordion className={classes.root}>\r\n                <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\">\r\n                    <Typography>{exercicio.nome} {exercicio.personalRecord}</Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails className={classes.detalhes}>\r\n                    <Grid container spacing={2} className={classes.detalhesBox}>\r\n                        <Grid container item xs={12} spacing={2}>\r\n                            {montarGridList()}\r\n                        </Grid>\r\n                    </Grid>\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { format, parseISO } from 'date-fns'\r\nimport PorcentagemList from '../PorcentagemList'\r\n//import pt from 'date-fns/locale/pt';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 100,\r\n    marginTop: 30,\r\n    width: 200\r\n  },\r\n  tabela: {\r\n    alignItems: 'center',\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'center',\r\n    left: '20%',\r\n    top: '30%',\r\n    position: 'absolute'\r\n  }\r\n});\r\n\r\nfunction calcularPorcentagem(peso, porcentagem) {\r\n  return (peso * (porcentagem / 100)).toFixed(2)\r\n}\r\n\r\nfunction TabelaPersonalRecord() {\r\n  const [exercicios, setExercicios] = useState([\r\n    {\r\n      nome: 'Front Squat',\r\n      data: parseISO('2020-10-05'),\r\n      personalRecord: 255\r\n    },\r\n    {\r\n      nome: 'Strict Pull UP',\r\n      data: parseISO('2020-10-05'),\r\n      personalRecord: 19\r\n    },\r\n    {\r\n      nome: 'Strict HSPU',\r\n      data: parseISO('2020-10-05'),\r\n      personalRecord: 17\r\n    },\r\n    {\r\n      nome: 'Toes to bar',\r\n      data: parseISO('2020-10-05'),\r\n      personalRecord: 33\r\n    },\r\n    {\r\n      nome: 'Shoulder Press',\r\n      data: parseISO('2020-10-05'),\r\n      personalRecord: 155\r\n    },\r\n    {\r\n      nome: 'Bench Press',\r\n      data: parseISO('2020-10-05'),\r\n      personalRecord: 215\r\n    },\r\n    {\r\n      nome: 'Back Squat',\r\n      data: parseISO('2020-10-09'),\r\n      personalRecord: 315\r\n    },\r\n    {\r\n      nome: 'Push Press',\r\n      data: parseISO('2020-10-09'),\r\n      personalRecord: 195\r\n    },\r\n    {\r\n      nome: 'DeadLift',\r\n      data: parseISO('2020-10-09'),\r\n      personalRecord: 390\r\n    },\r\n    {\r\n      nome: 'Power Clean & Jerk',\r\n      data: parseISO('2020-10-09'),\r\n      personalRecord: 205\r\n    },\r\n    {\r\n      nome: 'Power Snatch',\r\n      data: parseISO('2020-10-09'),\r\n      personalRecord: 155\r\n    }\r\n  ]);\r\n\r\n  const [porcentagens, setPorcentagens] = useState([{}]);\r\n  const [porcentagemInicial, setPorcentagemInicial] = useState(10);\r\n  const [intervalo, setIntervalo] = useState(2.5);\r\n\r\n\r\n\r\n  const handleOnChancePercentualInicial = (event) => {\r\n    setPorcentagemInicial(Number(event.target.value));\r\n  }\r\n\r\n  const handleOnChanceIntervalo = (event) => {\r\n    setIntervalo(Number(event.target.value));\r\n  }\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    function montarPorcentagens() {\r\n      let valor = porcentagemInicial\r\n      const valorTotal = 100;\r\n      let lista = [{\r\n        valor: valor\r\n      }]\r\n\r\n      while (valor < valorTotal) {\r\n        valor = valor + intervalo;\r\n        lista.push({\r\n          valor: valor\r\n        })\r\n      }\r\n      return lista;\r\n    }\r\n    setPorcentagens(montarPorcentagens());\r\n  }, [porcentagemInicial, intervalo]);\r\n\r\n  return (\r\n\r\n    <div >\r\n      <div>\r\n      <TextField id=\"outlined-basic\" label=\"Porcentagem Inicial\" variant=\"outlined\" value={porcentagemInicial} onChange={handleOnChancePercentualInicial} />\r\n      <FormControl component=\"fieldset\">\r\n        <FormLabel component=\"legend\">Intervalo Porcentagem</FormLabel>\r\n        <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\" value={intervalo} onChange={handleOnChanceIntervalo}>\r\n          <FormControlLabel\r\n            value={2.5}\r\n            control={<Radio color=\"primary\" />}\r\n            label=\"2,5\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            value={5}\r\n            control={<Radio color=\"primary\" />}\r\n            label=\"5\"\r\n            labelPlacement=\"start\"\r\n          />\r\n          <FormControlLabel\r\n            value={10}\r\n            control={<Radio color=\"primary\" />}\r\n            label=\"10\"\r\n            labelPlacement=\"start\"\r\n          />\r\n        </RadioGroup>\r\n      </FormControl>\r\n      </div>\r\n\r\n      <div>\r\n        {exercicios.map((row) => (<PorcentagemList exercicio={row} porcentagens={porcentagens}/>))}\r\n      </div>\r\n      {/* <TableContainer component={Paper}>\r\n        <Table className={classes.table} aria-label=\"customized table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <StyledTableCell>Exercício</StyledTableCell>\r\n              <StyledTableCell>Data</StyledTableCell>\r\n              <StyledTableCell align=\"left\">PR</StyledTableCell>\r\n              {porcentagens.map((porcentagem) => (\r\n                <StyledTableCell align=\"left\">{porcentagem.valor}%</StyledTableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {exercicios.map((row) => (\r\n              <StyledTableRow key={row.nome}>\r\n                <StyledTableCell component=\"th\" scope=\"row\">\r\n                  {row.nome}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"left\">{format(row.data, 'dd/MM/yyyy')}</StyledTableCell>\r\n                <StyledTableCell align=\"left\">{row.personalRecord}</StyledTableCell>\r\n                {porcentagens.map((porcentagem) => (\r\n                  <StyledTableCell align=\"left\">{\r\n                    calcularPorcentagem(row.personalRecord, porcentagem.valor)\r\n                  }</StyledTableCell>\r\n                ))}\r\n              </StyledTableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TabelaPersonalRecord;\r\n","import React from 'react';\nimport './App.css';\nimport TabelaPersonalRecord from './components/TabelaPersonalRecord'\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <TabelaPersonalRecord/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}