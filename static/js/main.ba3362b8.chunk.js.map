{"version":3,"sources":["components/TabelaPersonalRecord/index.js","App.js","serviceWorker.js","index.js"],"names":["StyledTableCell","withStyles","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","TableCell","StyledTableRow","root","action","hover","TableRow","useStyles","makeStyles","table","minWidth","marginTop","TabelaPersonalRecord","useState","nome","personalRecord","exercicios","porcentagens","setPorcentagens","porcentagemInicial","setPorcentagemInicial","intervalo","setIntervalo","classes","useEffect","valor","lista","push","montarPorcentagens","TextField","id","label","variant","value","onChange","event","Number","target","FormControl","component","FormLabel","RadioGroup","row","aria-label","name","defaultValue","FormControlLabel","control","Radio","labelPlacement","TableContainer","Paper","Table","className","TableHead","align","map","porcentagem","TableBody","key","scope","peso","toFixed","calcularPorcentagem","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ba3362b8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  }))(TableCell);\r\n  \r\n  const StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      '&:nth-of-type(odd)': {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  }))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n      minWidth: 700,\r\n      marginTop: 30,\r\n    },\r\n  });\r\n\r\n  function calcularPorcentagem(peso, porcentagem) {\r\n    return (peso * (porcentagem / 100)).toFixed(2)\r\n  }\r\n\r\nfunction TabelaPersonalRecord() {\r\n  const [exercicios, setExercicios] = useState([\r\n      { \r\n        nome:'Power Clean',\r\n        personalRecord: 205\r\n      },\r\n      { \r\n        nome:'Power Snacth',\r\n        personalRecord: 155\r\n      },\r\n      { \r\n        nome:'Strict HSPU',\r\n        personalRecord: 17\r\n      },\r\n      { \r\n        nome:'Toes 2 bar',\r\n        personalRecord: 33\r\n      }\r\n    ]); \r\n   \r\n   const [ porcentagens, setPorcentagens ] = useState([{ }]); \r\n   const [ porcentagemInicial, setPorcentagemInicial ] = useState(10);\r\n   const [ intervalo, setIntervalo ] = useState(2.5);\r\n   \r\n\r\n\r\n   const handleOnChancePercentualInicial = (event) => {\r\n    setPorcentagemInicial(Number(event.target.value));\r\n   }\r\n\r\n   const handleOnChanceIntervalo = (event) => {\r\n    setIntervalo(Number(event.target.value));\r\n   }\r\n\r\n   const classes = useStyles(); \r\n   \r\n   useEffect(() => {\r\n    function montarPorcentagens ()  {\r\n        let valor = porcentagemInicial\r\n        const valorTotal = 100;\r\n        let lista = [{\r\n            valor: valor\r\n        }]\r\n\r\n        while (valor < valorTotal) {\r\n            valor = valor + intervalo;\r\n            lista.push({\r\n                valor: valor\r\n            })\r\n        }\r\n        return lista;\r\n   }\r\n    setPorcentagens(montarPorcentagens());\r\n  }, [porcentagemInicial, intervalo]);\r\n\r\n  return (\r\n    \r\n    <div>\r\n      <TextField id=\"outlined-basic\" label=\"Porcentagem Inicial\" variant=\"outlined\" value={porcentagemInicial} onChange={handleOnChancePercentualInicial}/>\r\n      <FormControl component=\"fieldset\">\r\n      <FormLabel component=\"legend\">Intervalo Porcentagem</FormLabel>\r\n      <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\" value={intervalo} onChange={handleOnChanceIntervalo}>\r\n      <FormControlLabel\r\n          value={2.5}\r\n          control={<Radio color=\"primary\" />}\r\n          label=\"2,5\"\r\n          labelPlacement=\"start\"\r\n        />\r\n        <FormControlLabel\r\n          value={5}\r\n          control={<Radio color=\"primary\" />}\r\n          label=\"5\"\r\n          labelPlacement=\"start\"\r\n        />\r\n        <FormControlLabel\r\n          value={10}\r\n          control={<Radio color=\"primary\" />}\r\n          label=\"10\"\r\n          labelPlacement=\"start\"\r\n        />\r\n        <FormControlLabel\r\n          value={20}\r\n          control={<Radio color=\"primary\" />}\r\n          label=\"20\"\r\n          labelPlacement=\"start\"\r\n        />\r\n      </RadioGroup>\r\n    </FormControl>\r\n      <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"customized table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell>Exerc√≠cio</StyledTableCell>\r\n            <StyledTableCell align=\"left\">PR</StyledTableCell>\r\n            {porcentagens.map((porcentagem) => (\r\n                <StyledTableCell align=\"left\">{porcentagem.valor}%</StyledTableCell>    \r\n              ))}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {exercicios.map((row) => (\r\n            <StyledTableRow key={row.nome}>\r\n              <StyledTableCell component=\"th\" scope=\"row\">\r\n                {row.nome}\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"left\">{row.personalRecord}</StyledTableCell>\r\n              {porcentagens.map((porcentagem) => (\r\n                <StyledTableCell align=\"left\">{\r\n                    calcularPorcentagem(row.personalRecord, porcentagem.valor)\r\n                    }</StyledTableCell>    \r\n              ))}\r\n            </StyledTableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TabelaPersonalRecord;\r\n","import React from 'react';\nimport './App.css';\nimport TabelaPersonalRecord from '../src/components/TabelaPersonalRecord'\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <TabelaPersonalRecord/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}